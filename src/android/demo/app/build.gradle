apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-parcelize'

//应用 FT plugin
apply plugin: 'ft-plugin'

android {
    def localProperty = getLocalProperties()

    buildFeatures {
        buildConfig = true
    }

    namespace 'com.cloudcare.ft.mobile.sdk.demo'
    compileSdk 33
    defaultConfig {
        applicationId "com.guance.mobile.sdk.demo"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 3
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile file(localProperty.get("keyStorePath"))
            storePassword localProperty.get("storePassword")
            keyAlias localProperty.get("keyAlias")
            keyPassword localProperty.get("keyPassword")
        }

    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    flavorDimensions = ['tier']

    productFlavors {

        prodTest {
            buildConfigField "String", "CUSTOM_VALUE", "\"Custom value\""
            buildConfigField "String", "ACCESS_SERVER_URL", "\"${ft_env.datakitRUMUrl}\""
            buildConfigField "String", "RUM_APP_ID", "\"${ft_env.rumAppid}\""
            buildConfigField "String", "DEMO_API_URL", "\"${ft_env.demoAPIURL}\""
            buildConfigField "String", "ENV", "\"${ft_env.prodTestEnv}\""
            dimension "tier"
        }

        prodPublish {
            buildConfigField "String", "CUSTOM_VALUE", "\"Custom value\""
            buildConfigField "String", "ACCESS_SERVER_URL", "\"${ft_env.datakitRUMUrl}\""
            buildConfigField "String", "RUM_APP_ID", "\"${ft_env.rumAppid}\""
            buildConfigField "String", "DEMO_API_URL", "\"${ft_env.demoAPIURL}\""
            buildConfigField "String", "ENV", "\"${ft_env.prodPublishEnv}\""
            dimension "tier"
        }

    }

}

FTExt {
    showLog = true
    autoUploadMap = true
    autoUploadNativeDebugSymbol = true
    datakitDCAUrl = ft_env.datakitDCAUrl
    appId = ft_env.rumAppid
    env = 'common'

    prodFlavors {
        //Favor 中的配置会覆盖主项目 FTExt 中的配置
        prodTest {
            autoUploadMap = true
            autoUploadNativeDebugSymbol = true
            datakitDCAUrl = ft_env.datakitDCAUrl //remote datakit dca address
            appId = ft_env.rumAppid
            env = ft_env.prodPublishEnv

        }
        prodPublish {
            autoUploadMap = true
            autoUploadNativeDebugSymbol = true
            datakitDCAUrl = ft_env.datakitDCAUrl
            appId = ft_env.rumAppid
            env = ft_env.prodPublishEnv
        }
    }
}

def getLocalProperties() {

    def storePassword = System.getenv("storePassword")
    def keyAlias = System.getenv("keyAlias")
    def keyPassword = System.getenv("keyPassword")
    def keystorePath = System.getenv("keystorePath")


    Properties properties = new Properties()
    if (storePassword != null && keyAlias != null && keyPassword != null && keystorePath != null) {
        println("getLocalProperties for env")
        properties.setProperty("storePassword", storePassword)
        properties.setProperty("keyAlias", keyAlias)
        properties.setProperty("keyPassword", keyPassword)
        properties.setProperty("keystorePath", keystorePath)

    } else {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
    }
    return properties
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.2'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation project(path: ':nativelib')


    //================FT-SDK需要使用的引用=================//
    //FT-SDK引用
    implementation('com.cloudcare.ft.mobile.sdk.tracker.agent:ft-sdk:1.3.16-alpha01')

    implementation 'com.cloudcare.ft.mobile.sdk.tracker.agent:ft-native:1.0.0-beta01'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.picasso:picasso:2.8'

    //需用监控网络数据时，添加该依赖，实现网络引擎
//    implementation 'com.squareup.okhttp3:okhttp:3.12.12'
    implementation 'com.squareup.okhttp3:okhttp:4.5.0'

}